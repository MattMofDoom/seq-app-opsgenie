using System;
using System.Linq;
using System.Threading.Tasks;
using Seq.Apps;
using Seq.Apps.LogEvents;

// ReSharper disable MemberCanBePrivate.Global, UnusedType.Global, UnusedAutoPropertyAccessor.Global

namespace Seq.App.Opsgenie
{
    [SeqApp("Opsgenie Alerting", Description = "Send Opsgenie alerts using the HTTP API.")]
    public class OpsgenieApp : SeqApp, IDisposable, ISubscribeToAsync<LogEventData>
    {
        IDisposable _disposeClient;
        HandlebarsTemplate _generateMessage, _generateDescription;
        string[] _tags;
        
        // Permits substitution for testing.
        internal IOpsgenieApiClient ApiClient { get; set; }
        
        [SeqAppSetting(
            DisplayName = "API key", 
            HelpText = "The Opsgenie API key to use.",
            InputType = SettingInputType.Password)]
        public string ApiKey { get; set; }
        
        [SeqAppSetting(
            IsOptional = true,
            DisplayName = "Alert message",
            HelpText = "The message associated with the alert, specified with Handlebars syntax. If blank, the message " +
                       "from the incoming event or notification will be used.")]
        public string AlertMessage { get; set; }
        
        [SeqAppSetting(
            IsOptional = true,
            DisplayName = "Alert description",
            HelpText = "The description associated with the alert, specified with Handlebars syntax. If blank, a default" +
                       " description will be used.")]
        public string AlertDescription { get; set; }
        
        [SeqAppSetting(
            IsOptional = true,
            DisplayName = "Alert tags",
            HelpText = "Tags for the alert, separated by commas.")]
        public string Tags { get; set; }

        protected override void OnAttached()
        {
            _generateMessage = new HandlebarsTemplate(Host, !string.IsNullOrWhiteSpace(AlertMessage) ?
                AlertMessage :
                "{{$Message}}");
            
            _generateDescription = new HandlebarsTemplate(Host, !string.IsNullOrWhiteSpace(AlertDescription) ?
                AlertDescription :
                $"Generated by Seq running at {Host.BaseUri}.");

            _tags = (Tags ?? "")
                .Split(new[] {','}, StringSplitOptions.RemoveEmptyEntries)
                .Select(t => t.Trim())
                .ToArray();

            if (ApiClient == null)
            {
                var client = new OpsgenieApiClient(ApiKey);
                ApiClient = client;
                _disposeClient = client;
            }
        }

        public async Task OnAsync(Event<LogEventData> evt)
        {
            if (evt == null) throw new ArgumentNullException(nameof(evt));

            var alert = new OpsgenieAlert(
                _generateMessage.Render(evt),
                evt.Id,
                _generateDescription.Render(evt),
                Host.BaseUri,
                _tags);

            await ApiClient.CreateAsync(alert);
        }

        public void Dispose()
        {
            _disposeClient?.Dispose();
        }
    }
}
